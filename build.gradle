import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'java'
    id "com.github.ben-manes.versions" version "0.22.0"
    id 'se.patrikerdes.use-latest-versions' version '0.2.8'
}

apply plugin: 'java-library'

group = 'net.runelite'
version = '2.0.3'
description = 'OpenOSRS Launcher'

repositories {
    mavenLocal()
    maven {
        url = 'http://repo1.maven.org/maven2'
    }

    maven {
        url = 'https://raw.githubusercontent.com/runelite-extended/maven-repo/master'
    }
}

dependencies {
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.10'


    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.10'

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.28'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    implementation group: 'net.sf.jopt-simple', name: 'jopt-simple', version: '5.0.4'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    implementation group: 'com.google.guava', name: 'guava', version: '28.1-jre'

    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

processResources {
    from file("src/main/resources/net/runelite/launcher/launcher.properties"), {
        filter(ReplaceTokens, tokens: [
                "project.version": project.version
        ])
    }

    copy {
        from file("${rootDir}/packr/Info.plist"), {
            filter(ReplaceTokens, tokens: [
                    "finalName"       : "OpenOSRS",
                    "artifact"        : "launcher",
                    "project.version" : project.version,
                    "project.group"   : project.group
            ])
        }
        into("${rootDir}/build/filtered-resources/")

        from file("${rootDir}/innosetup/openosrs.iss"), {
            filter(ReplaceTokens, tokens: [
                    "project.version" : project.version,
                    "basedir"         : project.projectDir.path
            ])
        }
        into("${rootDir}/build/filtered-resources/")

        from file("${rootDir}/innosetup/openosrs32.iss"), {
            filter(ReplaceTokens, tokens: [
                    "project.version" : project.version,
                    "basedir"         : project.projectDir.path
            ])
        }
        into("${rootDir}/build/filtered-resources/")
    }
}

def isNonStable = { String version ->
    def unstableKeyword = ['ALPHA', 'BETA', 'RC'].any { it -> version.toUpperCase().contains(it) }

    return unstableKeyword
}

dependencyUpdates {
    checkForGradleUpdate = false

    resolutionStrategy {
        componentSelection {
            all {
                if (isNonStable(candidate.version)) {
                    reject()
                }
            }
        }
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'net.runelite.launcher.Launcher'
    }
}

shadowJar {
    archiveName 'OpenOSRS-shaded.jar'

    exclude("net/runelite/injector/**")
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task copyToLib(type: Copy) {
    into "$buildDir/lib"
    from configurations.runtime
}

tasks.build.dependsOn tasks.shadowJar
tasks.shadowJar.dependsOn tasks.copyToLib
